/** Generated by YAKINDU Statechart Tools code generator. */
package microwave.microwave;

import microwave.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_DoorClosed,
		microwave_DoorClosed_DoorClosed_Init,
		microwave_DoorClosed_DoorClosed_PuissanceHaut,
		microwave_DoorClosed_DoorClosed_PuissanceBas,
		microwave_DoorClosed_DoorClosed_Cooking,
		microwave_DoorClosed_DoorClosed_Finished,
		microwave_doorOpen,
		microwave_Waiting,
		microwave_Digits,
		microwave_Digits_digitSet_setTimer4,
		microwave_Digits_digitSet_setTimer3,
		microwave_Digits_digitSet_setTimer2,
		microwave_Digits_digitSet_setTimer1,
		microwave_Digits_digitSet_ToSetTimer,
		microwave_doorOpen2,
		$NullState$
	};
	
	private State[] historyVector = new State[2];
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private long time;
	
	protected long getTime() {
		return time;
	}
	
	protected void setTime(long value) {
		this.time = value;
	}
	
	
	private boolean cooking;
	
	protected boolean getCooking() {
		return cooking;
	}
	
	protected void setCooking(boolean value) {
		this.cooking = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 2; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setTime(0);
		
		setCooking(false);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_DoorClosed_DoorClosed_Init:
				microwave_DoorClosed_DoorClosed_Init_react(true);
				break;
			case microwave_DoorClosed_DoorClosed_PuissanceHaut:
				microwave_DoorClosed_DoorClosed_PuissanceHaut_react(true);
				break;
			case microwave_DoorClosed_DoorClosed_PuissanceBas:
				microwave_DoorClosed_DoorClosed_PuissanceBas_react(true);
				break;
			case microwave_DoorClosed_DoorClosed_Cooking:
				microwave_DoorClosed_DoorClosed_Cooking_react(true);
				break;
			case microwave_DoorClosed_DoorClosed_Finished:
				microwave_DoorClosed_DoorClosed_Finished_react(true);
				break;
			case microwave_doorOpen:
				microwave_doorOpen_react(true);
				break;
			case microwave_Waiting:
				microwave_Waiting_react(true);
				break;
			case microwave_Digits_digitSet_setTimer4:
				microwave_Digits_digitSet_setTimer4_react(true);
				break;
			case microwave_Digits_digitSet_setTimer3:
				microwave_Digits_digitSet_setTimer3_react(true);
				break;
			case microwave_Digits_digitSet_setTimer2:
				microwave_Digits_digitSet_setTimer2_react(true);
				break;
			case microwave_Digits_digitSet_setTimer1:
				microwave_Digits_digitSet_setTimer1_react(true);
				break;
			case microwave_Digits_digitSet_ToSetTimer:
				microwave_Digits_digitSet_ToSetTimer_react(true);
				break;
			case microwave_doorOpen2:
				microwave_doorOpen2_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_DoorClosed:
			return stateVector[0].ordinal() >= State.
					microwave_DoorClosed.ordinal()&& stateVector[0].ordinal() <= State.microwave_DoorClosed_DoorClosed_Finished.ordinal();
		case microwave_DoorClosed_DoorClosed_Init:
			return stateVector[0] == State.microwave_DoorClosed_DoorClosed_Init;
		case microwave_DoorClosed_DoorClosed_PuissanceHaut:
			return stateVector[0] == State.microwave_DoorClosed_DoorClosed_PuissanceHaut;
		case microwave_DoorClosed_DoorClosed_PuissanceBas:
			return stateVector[0] == State.microwave_DoorClosed_DoorClosed_PuissanceBas;
		case microwave_DoorClosed_DoorClosed_Cooking:
			return stateVector[0] == State.microwave_DoorClosed_DoorClosed_Cooking;
		case microwave_DoorClosed_DoorClosed_Finished:
			return stateVector[0] == State.microwave_DoorClosed_DoorClosed_Finished;
		case microwave_doorOpen:
			return stateVector[0] == State.microwave_doorOpen;
		case microwave_Waiting:
			return stateVector[0] == State.microwave_Waiting;
		case microwave_Digits:
			return stateVector[0].ordinal() >= State.
					microwave_Digits.ordinal()&& stateVector[0].ordinal() <= State.microwave_Digits_digitSet_ToSetTimer.ordinal();
		case microwave_Digits_digitSet_setTimer4:
			return stateVector[0] == State.microwave_Digits_digitSet_setTimer4;
		case microwave_Digits_digitSet_setTimer3:
			return stateVector[0] == State.microwave_Digits_digitSet_setTimer3;
		case microwave_Digits_digitSet_setTimer2:
			return stateVector[0] == State.microwave_Digits_digitSet_setTimer2;
		case microwave_Digits_digitSet_setTimer1:
			return stateVector[0] == State.microwave_Digits_digitSet_setTimer1;
		case microwave_Digits_digitSet_ToSetTimer:
			return stateVector[0] == State.microwave_Digits_digitSet_ToSetTimer;
		case microwave_doorOpen2:
			return stateVector[0] == State.microwave_doorOpen2;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_DoorClosed_DoorClosed_Init() {
		sCInterface.operationCallback.clearDisplay();
		
		sCInterface.operationCallback.closeDoor();
		
		setTime(0);
	}
	
	/* Entry action for state 'PuissanceHaut'. */
	private void entryAction_Microwave_DoorClosed_DoorClosed_PuissanceHaut() {
		sCInterface.setPower(1);
		
		sCInterface.operationCallback.display("High");
	}
	
	/* Entry action for state 'PuissanceBas'. */
	private void entryAction_Microwave_DoorClosed_DoorClosed_PuissanceBas() {
		sCInterface.setPower(2);
		
		sCInterface.operationCallback.display("Low");
	}
	
	/* Entry action for state 'Cooking'. */
	private void entryAction_Microwave_DoorClosed_DoorClosed_Cooking() {
		timer.setTimer(this, 0, (getTime() * 1000), false);
		
		timer.setTimer(this, 1, (1 * 1000), true);
		
		sCInterface.operationCallback.displayTime(getTime());
		
		sCInterface.operationCallback.cook();
		
		setCooking(true);
	}
	
	/* Entry action for state 'Finished'. */
	private void entryAction_Microwave_DoorClosed_DoorClosed_Finished() {
		timer.setTimer(this, 2, (5 * 1000), false);
		
		sCInterface.operationCallback.beepOn();
		
		sCInterface.operationCallback.display("Finished");
		
		setCooking(false);
	}
	
	/* Entry action for state 'doorOpen'. */
	private void entryAction_Microwave_doorOpen() {
		sCInterface.operationCallback.openDoor();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Microwave_Waiting() {
		sCInterface.operationCallback.openDoor();
		
		sCInterface.operationCallback.stopCook();
		
		sCInterface.operationCallback.display("Waiting");
	}
	
	/* Entry action for state 'setTimer4'. */
	private void entryAction_Microwave_Digits_digitSet_setTimer4() {
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'setTimer3'. */
	private void entryAction_Microwave_Digits_digitSet_setTimer3() {
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'setTimer2'. */
	private void entryAction_Microwave_Digits_digitSet_setTimer2() {
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'setTimer1'. */
	private void entryAction_Microwave_Digits_digitSet_setTimer1() {
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'ToSetTimer'. */
	private void entryAction_Microwave_Digits_digitSet_ToSetTimer() {
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'doorOpen2'. */
	private void entryAction_Microwave_doorOpen2() {
		sCInterface.operationCallback.openDoor();
	}
	
	/* Exit action for state 'Cooking'. */
	private void exitAction_Microwave_DoorClosed_DoorClosed_Cooking() {
		timer.unsetTimer(this, 0);
		
		timer.unsetTimer(this, 1);
		
		sCInterface.operationCallback.stopCook();
	}
	
	/* Exit action for state 'Finished'. */
	private void exitAction_Microwave_DoorClosed_DoorClosed_Finished() {
		timer.unsetTimer(this, 2);
		
		sCInterface.operationCallback.beepOff();
	}
	
	/* Exit action for state 'doorOpen'. */
	private void exitAction_Microwave_doorOpen() {
		sCInterface.operationCallback.closeDoor();
	}
	
	/* Exit action for state 'Waiting'. */
	private void exitAction_Microwave_Waiting() {
		sCInterface.operationCallback.closeDoor();
	}
	
	/* Exit action for state 'doorOpen2'. */
	private void exitAction_Microwave_doorOpen2() {
		sCInterface.operationCallback.closeDoor();
	}
	
	/* 'default' enter sequence for state DoorClosed */
	private void enterSequence_Microwave_DoorClosed_default() {
		enterSequence_Microwave_DoorClosed_DoorClosed_default();
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_Init_default() {
		entryAction_Microwave_DoorClosed_DoorClosed_Init();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_DoorClosed_DoorClosed_Init;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state PuissanceHaut */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut_default() {
		entryAction_Microwave_DoorClosed_DoorClosed_PuissanceHaut();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_DoorClosed_DoorClosed_PuissanceHaut;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state PuissanceBas */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas_default() {
		entryAction_Microwave_DoorClosed_DoorClosed_PuissanceBas();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_DoorClosed_DoorClosed_PuissanceBas;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Cooking */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_Cooking_default() {
		entryAction_Microwave_DoorClosed_DoorClosed_Cooking();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_DoorClosed_DoorClosed_Cooking;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Finished */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_Finished_default() {
		entryAction_Microwave_DoorClosed_DoorClosed_Finished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_DoorClosed_DoorClosed_Finished;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state doorOpen */
	private void enterSequence_Microwave_doorOpen_default() {
		entryAction_Microwave_doorOpen();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_doorOpen;
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Microwave_Waiting_default() {
		entryAction_Microwave_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Waiting;
	}
	
	/* 'default' enter sequence for state Digits */
	private void enterSequence_Microwave_Digits_default() {
		enterSequence_Microwave_Digits_digitSet_default();
	}
	
	/* 'default' enter sequence for state setTimer4 */
	private void enterSequence_Microwave_Digits_digitSet_setTimer4_default() {
		entryAction_Microwave_Digits_digitSet_setTimer4();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Digits_digitSet_setTimer4;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state setTimer3 */
	private void enterSequence_Microwave_Digits_digitSet_setTimer3_default() {
		entryAction_Microwave_Digits_digitSet_setTimer3();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Digits_digitSet_setTimer3;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state setTimer2 */
	private void enterSequence_Microwave_Digits_digitSet_setTimer2_default() {
		entryAction_Microwave_Digits_digitSet_setTimer2();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Digits_digitSet_setTimer2;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state setTimer1 */
	private void enterSequence_Microwave_Digits_digitSet_setTimer1_default() {
		entryAction_Microwave_Digits_digitSet_setTimer1();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Digits_digitSet_setTimer1;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state ToSetTimer */
	private void enterSequence_Microwave_Digits_digitSet_ToSetTimer_default() {
		entryAction_Microwave_Digits_digitSet_ToSetTimer();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Digits_digitSet_ToSetTimer;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state doorOpen2 */
	private void enterSequence_Microwave_doorOpen2_default() {
		entryAction_Microwave_doorOpen2();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_doorOpen2;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region DoorClosed */
	private void enterSequence_Microwave_DoorClosed_DoorClosed_default() {
		react_Microwave_DoorClosed_DoorClosed__entry_Default();
	}
	
	/* shallow enterSequence with history in child DoorClosed */
	private void shallowEnterSequence_Microwave_DoorClosed_DoorClosed() {
		switch (historyVector[0]) {
		case microwave_DoorClosed_DoorClosed_Init:
			enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceHaut:
			enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut_default();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceBas:
			enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas_default();
			break;
		case microwave_DoorClosed_DoorClosed_Cooking:
			enterSequence_Microwave_DoorClosed_DoorClosed_Cooking_default();
			break;
		case microwave_DoorClosed_DoorClosed_Finished:
			enterSequence_Microwave_DoorClosed_DoorClosed_Finished_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region digitSet */
	private void enterSequence_Microwave_Digits_digitSet_default() {
		react_Microwave_Digits_digitSet__entry_Default();
	}
	
	/* shallow enterSequence with history in child digitSet */
	private void shallowEnterSequence_Microwave_Digits_digitSet() {
		switch (historyVector[1]) {
		case microwave_Digits_digitSet_setTimer4:
			enterSequence_Microwave_Digits_digitSet_setTimer4_default();
			break;
		case microwave_Digits_digitSet_setTimer3:
			enterSequence_Microwave_Digits_digitSet_setTimer3_default();
			break;
		case microwave_Digits_digitSet_setTimer2:
			enterSequence_Microwave_Digits_digitSet_setTimer2_default();
			break;
		case microwave_Digits_digitSet_setTimer1:
			enterSequence_Microwave_Digits_digitSet_setTimer1_default();
			break;
		case microwave_Digits_digitSet_ToSetTimer:
			enterSequence_Microwave_Digits_digitSet_ToSetTimer_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state DoorClosed */
	private void exitSequence_Microwave_DoorClosed() {
		exitSequence_Microwave_DoorClosed_DoorClosed();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_DoorClosed_DoorClosed_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PuissanceHaut */
	private void exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PuissanceBas */
	private void exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cooking */
	private void exitSequence_Microwave_DoorClosed_DoorClosed_Cooking() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_DoorClosed_DoorClosed_Cooking();
	}
	
	/* Default exit sequence for state Finished */
	private void exitSequence_Microwave_DoorClosed_DoorClosed_Finished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_DoorClosed_DoorClosed_Finished();
	}
	
	/* Default exit sequence for state doorOpen */
	private void exitSequence_Microwave_doorOpen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_doorOpen();
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Microwave_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Waiting();
	}
	
	/* Default exit sequence for state Digits */
	private void exitSequence_Microwave_Digits() {
		exitSequence_Microwave_Digits_digitSet();
	}
	
	/* Default exit sequence for state setTimer4 */
	private void exitSequence_Microwave_Digits_digitSet_setTimer4() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state setTimer3 */
	private void exitSequence_Microwave_Digits_digitSet_setTimer3() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state setTimer2 */
	private void exitSequence_Microwave_Digits_digitSet_setTimer2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state setTimer1 */
	private void exitSequence_Microwave_Digits_digitSet_setTimer1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ToSetTimer */
	private void exitSequence_Microwave_Digits_digitSet_ToSetTimer() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state doorOpen2 */
	private void exitSequence_Microwave_doorOpen2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_doorOpen2();
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_DoorClosed_DoorClosed_Init:
			exitSequence_Microwave_DoorClosed_DoorClosed_Init();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceHaut:
			exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceBas:
			exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas();
			break;
		case microwave_DoorClosed_DoorClosed_Cooking:
			exitSequence_Microwave_DoorClosed_DoorClosed_Cooking();
			break;
		case microwave_DoorClosed_DoorClosed_Finished:
			exitSequence_Microwave_DoorClosed_DoorClosed_Finished();
			break;
		case microwave_doorOpen:
			exitSequence_Microwave_doorOpen();
			break;
		case microwave_Waiting:
			exitSequence_Microwave_Waiting();
			break;
		case microwave_Digits_digitSet_setTimer4:
			exitSequence_Microwave_Digits_digitSet_setTimer4();
			break;
		case microwave_Digits_digitSet_setTimer3:
			exitSequence_Microwave_Digits_digitSet_setTimer3();
			break;
		case microwave_Digits_digitSet_setTimer2:
			exitSequence_Microwave_Digits_digitSet_setTimer2();
			break;
		case microwave_Digits_digitSet_setTimer1:
			exitSequence_Microwave_Digits_digitSet_setTimer1();
			break;
		case microwave_Digits_digitSet_ToSetTimer:
			exitSequence_Microwave_Digits_digitSet_ToSetTimer();
			break;
		case microwave_doorOpen2:
			exitSequence_Microwave_doorOpen2();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DoorClosed */
	private void exitSequence_Microwave_DoorClosed_DoorClosed() {
		switch (stateVector[0]) {
		case microwave_DoorClosed_DoorClosed_Init:
			exitSequence_Microwave_DoorClosed_DoorClosed_Init();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceHaut:
			exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut();
			break;
		case microwave_DoorClosed_DoorClosed_PuissanceBas:
			exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas();
			break;
		case microwave_DoorClosed_DoorClosed_Cooking:
			exitSequence_Microwave_DoorClosed_DoorClosed_Cooking();
			break;
		case microwave_DoorClosed_DoorClosed_Finished:
			exitSequence_Microwave_DoorClosed_DoorClosed_Finished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region digitSet */
	private void exitSequence_Microwave_Digits_digitSet() {
		switch (stateVector[0]) {
		case microwave_Digits_digitSet_setTimer4:
			exitSequence_Microwave_Digits_digitSet_setTimer4();
			break;
		case microwave_Digits_digitSet_setTimer3:
			exitSequence_Microwave_Digits_digitSet_setTimer3();
			break;
		case microwave_Digits_digitSet_setTimer2:
			exitSequence_Microwave_Digits_digitSet_setTimer2();
			break;
		case microwave_Digits_digitSet_setTimer1:
			exitSequence_Microwave_Digits_digitSet_setTimer1();
			break;
		case microwave_Digits_digitSet_ToSetTimer:
			exitSequence_Microwave_Digits_digitSet_ToSetTimer();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_DoorClosed_DoorClosed__entry_Default() {
		enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
	}
	
	/* Default react sequence for shallow history entry reprendre */
	private void react_Microwave_DoorClosed_DoorClosed_reprendre() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NullState$) {
			shallowEnterSequence_Microwave_DoorClosed_DoorClosed();
		} else {
			enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_DoorClosed_default();
	}
	
	/* Default react sequence for shallow history entry reprendre */
	private void react_Microwave_Digits_digitSet_reprendre() {
		/* Enter the region with shallow history */
		if (historyVector[1] != State.$NullState$) {
			shallowEnterSequence_Microwave_Digits_digitSet();
		} else {
			enterSequence_Microwave_Digits_digitSet_ToSetTimer_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Digits_digitSet__entry_Default() {
		enterSequence_Microwave_Digits_digitSet_ToSetTimer_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_DoorClosed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((sCInterface.open) && (getCooking()==false))) {
					exitSequence_Microwave_DoorClosed();
					enterSequence_Microwave_doorOpen_default();
				} else {
					if (sCInterface.stop) {
						exitSequence_Microwave_DoorClosed();
						setCooking(false);
						
						enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
					} else {
						if (((sCInterface.timer) && ((sCInterface.getPower()==1 || sCInterface.getPower()==2)))) {
							exitSequence_Microwave_DoorClosed();
							enterSequence_Microwave_Digits_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_DoorClosed_DoorClosed_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_DoorClosed_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_DoorClosed_DoorClosed_Init();
					enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut_default();
				} else {
					if (sCInterface.low) {
						exitSequence_Microwave_DoorClosed_DoorClosed_Init();
						enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_DoorClosed_DoorClosed_PuissanceHaut_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_DoorClosed_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut();
					enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_DoorClosed_DoorClosed_PuissanceBas_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_DoorClosed_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_DoorClosed_DoorClosed_PuissanceBas();
					enterSequence_Microwave_DoorClosed_DoorClosed_PuissanceHaut_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_DoorClosed_DoorClosed_Cooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_DoorClosed_react(try_transition)==false) {
				if (timeEvents[0]) {
					exitSequence_Microwave_DoorClosed_DoorClosed_Cooking();
					enterSequence_Microwave_DoorClosed_DoorClosed_Finished_default();
				} else {
					if (((sCInterface.open) && (getCooking()==true))) {
						exitSequence_Microwave_DoorClosed();
						enterSequence_Microwave_Waiting_default();
					} else {
						if (timeEvents[1]) {
							exitSequence_Microwave_DoorClosed_DoorClosed_Cooking();
							setTime((time - 1));
							
							enterSequence_Microwave_DoorClosed_DoorClosed_Cooking_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_DoorClosed_DoorClosed_Finished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_DoorClosed_react(try_transition)==false) {
				if (timeEvents[2]) {
					exitSequence_Microwave_DoorClosed_DoorClosed_Finished();
					enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_doorOpen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_doorOpen();
					react_Microwave_DoorClosed_DoorClosed_reprendre();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_Waiting();
					react_Microwave_DoorClosed_DoorClosed_reprendre();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (((sCInterface.start) && (getTime()>0))) {
					exitSequence_Microwave_Digits();
					enterSequence_Microwave_DoorClosed_DoorClosed_Cooking_default();
				} else {
					if (((sCInterface.open) && (getCooking()==false))) {
						exitSequence_Microwave_Digits();
						enterSequence_Microwave_doorOpen2_default();
					} else {
						if (sCInterface.stop) {
							exitSequence_Microwave_Digits();
							enterSequence_Microwave_DoorClosed_DoorClosed_Init_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_digitSet_setTimer4_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Digits_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_digitSet_setTimer3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Digits_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Digits_digitSet_setTimer3();
					setTime(((time * 10) + sCInterface.getDigitValue()));
					
					enterSequence_Microwave_Digits_digitSet_setTimer4_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_digitSet_setTimer2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Digits_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Digits_digitSet_setTimer2();
					setTime(((time * 10) + sCInterface.getDigitValue()));
					
					enterSequence_Microwave_Digits_digitSet_setTimer3_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_digitSet_setTimer1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Digits_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Digits_digitSet_setTimer1();
					setTime(((time * 10) + sCInterface.getDigitValue()));
					
					enterSequence_Microwave_Digits_digitSet_setTimer2_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Digits_digitSet_ToSetTimer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Digits_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Digits_digitSet_ToSetTimer();
					setTime(sCInterface.getDigitValue());
					
					enterSequence_Microwave_Digits_digitSet_setTimer1_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_doorOpen2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_doorOpen2();
					react_Microwave_Digits_digitSet_reprendre();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
